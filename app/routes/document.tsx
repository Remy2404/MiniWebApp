import { useState } from "react";
import { Link } from "react-router";
import { 
  ArrowLeft, 
  FileText, 
  Download, 
  FileType2, 
  Wand2,
  BookOpen,
  Briefcase,
  GraduationCap,
  Heart,
  Sparkles
} from "lucide-react";

import type { Route } from "./+types/document";

export function meta({}: Route.MetaArgs) {
  return [
    { title: "Document Generator - AI Assistant" },
    { name: "description", content: "Generate professional documents with AI" },
  ];
}

const DOCUMENT_TYPES = [
  {
    id: "article",
    name: "Article/Blog Post",
    icon: <BookOpen className="w-5 h-5" />,
    description: "Engaging articles and blog posts",
    placeholder: "Write an article about sustainable living practices"
  },
  {
    id: "report",
    name: "Business Report",
    icon: <Briefcase className="w-5 h-5" />,
    description: "Professional business reports",
    placeholder: "Generate a quarterly sales analysis report"
  },
  {
    id: "essay",
    name: "Academic Essay",
    icon: <GraduationCap className="w-5 h-5" />,
    description: "Well-structured academic essays",
    placeholder: "Write an essay on the impact of artificial intelligence"
  },
  {
    id: "letter",
    name: "Formal Letter",
    icon: <Heart className="w-5 h-5" />,
    description: "Professional correspondence",
    placeholder: "Write a cover letter for a software engineer position"
  },
  {
    id: "proposal",
    name: "Project Proposal",
    icon: <FileText className="w-5 h-5" />,
    description: "Detailed project proposals",
    placeholder: "Create a proposal for a mobile app development project"
  },
  {
    id: "summary",
    name: "Executive Summary",
    icon: <Sparkles className="w-5 h-5" />,
    description: "Concise executive summaries",
    placeholder: "Summarize our company's annual performance"
  }
];

const OUTPUT_FORMATS = [
  { id: "markdown", name: "Markdown", ext: ".md", icon: <FileType2 className="w-4 h-4" /> },
  { id: "txt", name: "Plain Text", ext: ".txt", icon: <FileText className="w-4 h-4" /> },
  { id: "html", name: "HTML", ext: ".html", icon: <FileType2 className="w-4 h-4" /> }
];

export default function DocumentGenerator() {
  const [selectedType, setSelectedType] = useState("article");
  const [prompt, setPrompt] = useState("");
  const [outputFormat, setOutputFormat] = useState("markdown");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState("");
  const [wordCount, setWordCount] = useState(500);

  const selectedDocType = DOCUMENT_TYPES.find(type => type.id === selectedType);

  const handleGenerate = async () => {
    if (!prompt.trim() || isGenerating) return;
    
    setIsGenerating(true);
    
    // Simulate document generation - In production, this would call your backend
    setTimeout(() => {
      const sampleContent = `# ${selectedDocType?.name}\n\n## Introduction\n\nThis is a demo document generated based on your prompt: "${prompt}"\n\n## Main Content\n\nIn the full implementation, this would be a comprehensive ${selectedDocType?.name.toLowerCase()} generated by AI according to your specifications. The content would be:\n\n- Well-structured and professional\n- Tailored to your specific requirements\n- Formatted according to industry standards\n- Optimized for the target audience\n\n## Key Points\n\n1. **Professional Quality**: Every document is crafted with attention to detail\n2. **Customizable**: Adapt the content to your specific needs\n3. **Multiple Formats**: Export in various formats for different use cases\n4. **AI-Powered**: Leveraging advanced AI for natural, engaging content\n\n## Conclusion\n\nThis demonstration shows how the AI document generator would create professional content based on your input. The actual implementation would produce much more detailed and specific content tailored to your exact requirements.\n\n---\n\n*Generated by AI Assistant - Document Generator*`;
      
      setGeneratedContent(sampleContent);
      setIsGenerating(false);
    }, 3000);
  };

  const downloadDocument = () => {
    const format = OUTPUT_FORMATS.find(f => f.id === outputFormat);
    const blob = new Blob([generatedContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-document-${Date.now()}${format?.ext}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getWordCountFromContent = (content: string) => {
    return content.split(/\s+/).filter(word => word.length > 0).length;
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3">
        <div className="flex items-center gap-3">
          <Link 
            to="/"
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full transition-colors"
          >
            <ArrowLeft className="w-5 h-5 text-gray-600 dark:text-gray-400" />
          </Link>
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-orange-600 rounded-full flex items-center justify-center">
              <FileText className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="font-semibold text-gray-900 dark:text-white">Document Generator</h1>
              <p className="text-sm text-gray-600 dark:text-gray-400">AI-powered content creation</p>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="max-w-lg mx-auto px-4 py-6 space-y-6">
        
        {/* Document Type Selection */}
        <div className="bg-white dark:bg-gray-800 rounded-2xl p-4 border border-gray-200 dark:border-gray-700">
          <h3 className="font-semibold text-gray-900 dark:text-white mb-4">Document Type</h3>
          <div className="grid grid-cols-1 gap-3">
            {DOCUMENT_TYPES.map((type) => (
              <button
                key={type.id}
                onClick={() => {
                  setSelectedType(type.id);
                  setPrompt(type.placeholder);
                }}
                className={`p-4 rounded-xl border transition-all text-left ${
                  selectedType === type.id
                    ? "border-orange-500 bg-orange-50 dark:bg-orange-900/20"
                    : "border-gray-200 dark:border-gray-600 hover:border-orange-300 dark:hover:border-orange-600"
                }`}
              >
                <div className="flex items-start gap-3">
                  <div className={`p-2 rounded-lg ${
                    selectedType === type.id
                      ? "bg-orange-500 text-white"
                      : "bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400"
                  }`}>
                    {type.icon}
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900 dark:text-white">
                      {type.name}
                    </h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                      {type.description}
                    </p>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Document Settings */}
        <div className="bg-white dark:bg-gray-800 rounded-2xl p-4 border border-gray-200 dark:border-gray-700">
          <h3 className="font-semibold text-gray-900 dark:text-white mb-4">Settings</h3>
          
          {/* Word Count */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Target Word Count: {wordCount}
            </label>
            <input
              type="range"
              min="100"
              max="2000"
              step="100"
              value={wordCount}
              onChange={(e) => setWordCount(Number(e.target.value))}
              className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
            />
            <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
              <span>100</span>
              <span>2000</span>
            </div>
          </div>

          {/* Output Format */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Output Format
            </label>
            <div className="grid grid-cols-3 gap-2">
              {OUTPUT_FORMATS.map((format) => (
                <button
                  key={format.id}
                  onClick={() => setOutputFormat(format.id)}
                  className={`p-3 rounded-xl text-sm transition-colors flex flex-col items-center gap-1 ${
                    outputFormat === format.id
                      ? "bg-orange-500 text-white"
                      : "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
                  }`}
                >
                  {format.icon}
                  {format.name}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Content Prompt */}
        <div className="bg-white dark:bg-gray-800 rounded-2xl p-4 border border-gray-200 dark:border-gray-700">
          <h3 className="font-semibold text-gray-900 dark:text-white mb-3">Content Description</h3>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder={selectedDocType?.placeholder}
            rows={4}
            className="w-full px-3 py-3 bg-gray-50 dark:bg-gray-700 rounded-xl border-0 resize-none focus:ring-2 focus:ring-orange-500 focus:outline-none text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
          />
          
          <button
            onClick={handleGenerate}
            disabled={!prompt.trim() || isGenerating}
            className="w-full mt-4 bg-orange-500 hover:bg-orange-600 disabled:bg-gray-300 dark:disabled:bg-gray-600 text-white py-3 rounded-xl font-medium transition-colors flex items-center justify-center gap-2"
          >
            {isGenerating ? (
              <>
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                Generating Document...
              </>
            ) : (
              <>
                <Wand2 className="w-5 h-5" />
                Generate Document
              </>
            )}
          </button>
        </div>

        {/* Generated Content */}
        {generatedContent && (
          <div className="bg-white dark:bg-gray-800 rounded-2xl p-4 border border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-semibold text-gray-900 dark:text-white">Generated Document</h3>
              <span className="text-sm text-gray-500 dark:text-gray-400">
                {getWordCountFromContent(generatedContent)} words
              </span>
            </div>
            
            <div className="bg-gray-50 dark:bg-gray-700 rounded-xl p-4 max-h-64 overflow-y-auto">
              <pre className="text-sm text-gray-900 dark:text-white whitespace-pre-wrap font-sans">
                {generatedContent}
              </pre>
            </div>
            
            <div className="flex gap-3 mt-4">
              <button
                onClick={() => navigator.clipboard.writeText(generatedContent)}
                className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-xl font-medium transition-colors"
              >
                Copy Text
              </button>
              <button
                onClick={downloadDocument}
                className="flex-1 bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-xl font-medium transition-colors flex items-center justify-center gap-2"
              >
                <Download className="w-4 h-4" />
                Download
              </button>
            </div>
          </div>
        )}

        {/* Tips */}
        <div className="bg-gradient-to-r from-orange-50 to-yellow-50 dark:from-orange-900/20 dark:to-yellow-900/20 rounded-2xl p-4 border border-orange-200 dark:border-orange-800">
          <h3 className="font-semibold text-gray-900 dark:text-white mb-2 flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-yellow-500" />
            Tips for Better Documents
          </h3>
          <ul className="text-sm text-gray-700 dark:text-gray-300 space-y-1">
            <li>• Be specific about your topic and target audience</li>
            <li>• Include key points or requirements you want covered</li>
            <li>• Mention the tone (formal, casual, technical, etc.)</li>
            <li>• Specify any industry or domain-specific requirements</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
